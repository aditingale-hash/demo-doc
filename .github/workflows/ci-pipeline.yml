# Name of your workflow
name: Python CI/CD Pipeline

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ] # Run on pushes to the main branch
  pull_request:
    branches: [ "main" ] # Also run on pull requests targeting the main branch

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job is named 'build_and_test'
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest # Use the latest Ubuntu Linux runner

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Check out your repository code so the workflow can access it
      - name: Check out code
        uses: actions/checkout@v3 # Use a predefined GitHub Action for checking out

      # Step 2: Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v4 # Use a predefined action for Python setup
        with:
          python-version: '3.10' # Specify the Python version you want to use
          cache: 'pip' # Cache pip dependencies to speed up subsequent runs

      # Step 3: Install dependencies
      - name: Install dependencies
        run: | # Use '|' for multi-line commands
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Linting (Optional but recommended) - Add a linter like Flake8
      # - name: Lint with Flake8
      #   run: |
      #     pip install flake8
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Step 5: Run tests with Pytest
      - name: Test with Pytest
        run: pytest # Execute pytest, which will find and run test_app.py

      # Step 6: Build (Optional - runs the build.py script if you created it)
      # - name: Build Application Package
      #   run: python build.py

      # Step 7: Deploy (Placeholder - runs deploy.sh if you created it)
      # This step would only run on pushes to main, not PRs usually.
      # Requires the build artifact if using the build script.
      # - name: Deploy to Production (Simulated)
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Condition to only run on push to main
      #   run: bash deploy.sh
      #   # In a real scenario, you might need to configure secrets (API keys, server IPs)
      #   # env:
      #   #   SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
      #   #   SERVER_IP: ${{ secrets.PRODUCTION_IP }}